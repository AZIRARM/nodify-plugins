{
  "id": "6877b667-3c07-444f-ac33-bad8340dc944",
  "enabled": true,
  "editable": false,
  "description": "Nodify plugin for feedbacks only html/js content",
  "name": "feedbacks",
  "code": "/**\n * Injects feedback UI and handles submission logic\n * @param {string} TAG_NAME - Tag for feedback container (default: 'div')\n * @param {string} CSS_SELECTOR - Selector to locate parent feedback zones (default: '.feedback_zone')\n * @param {string} FEEDBACK_CONFIG_JSON - JSON string for button configuration\n * @param {string} API_URL - Endpoint for submitting feedback\n * @param {string} USER_ID - User identifier\n * @param {boolean} VERIFIED - Verification status of user\n * @param {string} MESSAGE_AFTER_SUBMIT - Message to show after submission\n * @param {string} MESSAGE_ALREADY_SUBMETED - Message to show when already submitted\n * @param {boolean} ACTIVATE_USER_FEEDBACK_MESSAGE - Enable a user message field if true\n */\nfunction initFeedback(\n  TAG_NAME = 'div',\n  CSS_SELECTOR = '.feedback_zone',\n  FEEDBACK_CONFIG_JSON,\n  API_URL,\n  USER_ID,\n  VERIFIED,\n  MESSAGE_AFTER_SUBMIT,\n  MESSAGE_ALREADY_SUBMETED,\n  ACTIVATE_USER_FEEDBACK_MESSAGE = false\n) {\n  let configArray;\n  try {\n    configArray = JSON.parse(FEEDBACK_CONFIG_JSON);\n    if (!Array.isArray(configArray)) {\n      throw new Error(\"Invalid config: Expected an array of button configurations\");\n    }\n  } catch (err) {\n    console.error('JSON parsing error:', err);\n    return;\n  }\n\n  const containers = document.querySelectorAll(`${CSS_SELECTOR} ${TAG_NAME}`);\n  if (!containers.length) {\n    console.warn(`No elements found with selector: \"${CSS_SELECTOR} ${TAG_NAME}\"`);\n    return;\n  }\n\n  containers.forEach(container => {\n    const parentZone = container.closest(CSS_SELECTOR);\n    const contentCode = parentZone?.dataset.contentCode;\n\n    // Already submitted\n    if (localStorage.getItem(`feedback-${contentCode}`)) {\n      container.innerHTML = `<p class=\"feedback-thankyou\">${MESSAGE_ALREADY_SUBMETED}</p>`;\n      return;\n    }\n\n    container.innerHTML = '';\n    const buttonGroup = document.createElement('div');\n    buttonGroup.className = 'feedback-button-group';\n\n    // Optional user message input\n    let userMessageInput = null;\n    if (ACTIVATE_USER_FEEDBACK_MESSAGE) {\n      userMessageInput = document.createElement('textarea');\n      userMessageInput.className = 'feedback-user-message';\n      userMessageInput.placeholder = 'Add a comment (optional)...';\n      userMessageInput.rows = 2;\n      container.appendChild(userMessageInput);\n    }\n\n    configArray.forEach(cfg => {\n      const btn = document.createElement('button');\n      btn.className = 'feedback-button';\n      btn.innerHTML = `\n        <span class=\"feedback-icon\">${cfg.icon || '★'}</span>\n        <span class=\"feedback-label\">${cfg.label}</span>\n        <span class=\"feedback-count\"></span>\n      `;\n      btn.dataset.value = cfg.value;\n      btn.dataset.label = cfg.label;\n      btn.dataset.icon = cfg.icon || '★';\n\n      btn.addEventListener('click', () => {\n        const buttons = buttonGroup.querySelectorAll('.feedback-button');\n        if (localStorage.getItem(`feedback-${contentCode}`)) return;\n\n        buttons.forEach(b => {\n          b.disabled = true;\n          b.classList.add('feedback-loading');\n        });\n\n        const payload = {\n          contentCode,\n          evaluation: btn.dataset.value,\n          message: ACTIVATE_USER_FEEDBACK_MESSAGE && userMessageInput\n            ? userMessageInput.value.trim() || btn.dataset.label\n            : btn.dataset.label,\n          userId: USER_ID,\n          verified: VERIFIED\n        };\n\n        fetch(`${API_URL}/feedbacks`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(payload)\n        })\n        .then(response => {\n          if (!response.ok) throw new Error(`HTTP ${response.status}`);\n          return response.json();\n        })\n        .then(data => {\n          localStorage.setItem(`feedback-${contentCode}`, 'voted');\n\n          buttons.forEach(b => {\n            b.classList.remove('feedback-loading');\n            b.classList.remove('feedback-sent');\n            b.disabled = false;\n          });\n\n          btn.classList.add('feedback-sent', 'animate-feedback');\n          btn.innerHTML = `✓ ${MESSAGE_AFTER_SUBMIT}`;\n          btn.disabled = true;\n\n          // Optional count update\n         if (data?.counts) {\n            buttons.forEach(b => {\n              const val = b.dataset.value;\n              const count = data.counts[val] || 0;\n              const countSpan = b.querySelector('.feedback-count');\n              if (countSpan) countSpan.textContent = `(${count})`;\n            });\n          }\n\n          if (userMessageInput) userMessageInput.disabled = true;\n        })\n        .catch(error => {\n          console.error(\"Feedback submission failed:\", error);\n          buttons.forEach(b => {\n            b.classList.remove('feedback-loading');\n            b.disabled = false;\n          });\n        });\n      });\n\n      buttonGroup.appendChild(btn);\n    });\n\n    container.appendChild(buttonGroup);\n  });\n}\n",
  "entrypoint": null,
  "creationDate": 1749231972173,
  "modificationDate": 1749379380819,
  "modifiedBy": null,
  "deleted": false,
  "resources": []
}